/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"
#include "sleep.h"

#include "rfid_zynq.h"
#include "mfrc522.h"

#define aimAddr = 0x3c;
#define aimAddrOpp = 0xc3;

unsigned char data1[16] = {0x12, 0x34, 0x56, 0x78, 0xED, 0xCB, 0xA9, 0x87, 0x12, 0x34, 0x56, 0x78, 0x3c, 0xc3, 0x3c, 0xc3};
unsigned char data2[4] = {0, 0, 0, 0x01};
unsigned char DefaultKey[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

unsigned char g_ucTempbuf[20];
void delay1(unsigned int z)
{
    unsigned int x, y;
    for (x = z; x > 0; x--)
        for (y = 110; y > 0; y--)
            ;
}


XGpio miso, rst, mosi, sck, sda;

int main()
{
    init_platform();

    //initial GPIO
    int s0, s1, s2, s3, s4;
    s0 = XGpio_Initialize(&miso, MF522_MISO_ID);
    s1 = XGpio_Initialize(&rst,  MF522_RST_ID);
    s2 = XGpio_Initialize(&mosi, MF522_MOSI_ID);
    s3 = XGpio_Initialize(&sck,  MF522_SCK_ID);
    s4 = XGpio_Initialize(&sda,  MF522_SDA_ID);
   	if ( (s0 != XST_SUCCESS) && (s1 != XST_SUCCESS) && (s2 != XST_SUCCESS) && (s3 != XST_SUCCESS) && (s4 != XST_SUCCESS)) {
   		xil_printf("Gpio Initialization Failed\r\n");
    	return XST_FAILURE;
    }

    print("Hello World\n\r");

    	unsigned char status, i;
        unsigned int temp;
        PcdReset();
        PcdAntennaOff();
        PcdAntennaOn();
        while (1)
        {

            status = PcdRequest(PICC_REQALL, g_ucTempbuf); //Ñ°¿¨
            if (status != MI_OK) //initial
            {
                InitializeSystem();
                PcdReset();
                PcdAntennaOff();
                PcdAntennaOn();
                continue;
            }

            printf("¿¨µÄÀàÐÍ:");
            for (i = 0; i < 2; i++)
            {
                temp = g_ucTempbuf[i];
                printf("%X", temp);
            }

            status = PcdAnticoll(g_ucTempbuf); //·À³å×²
            if (status != MI_OK)
            {
                continue;
            }

            ////////ÒÔÏÂÎª³¬¼¶ÖÕ¶Ë´òÓ¡³öµÄÄÚÈÝ////////////////////////

            printf("¿¨ÐòÁÐºÅ£º"); //³¬¼¶ÖÕ¶ËÏÔÊ¾,
            for (i = 0; i < 4; i++)
            {
                temp = g_ucTempbuf[i];
                printf("%X", temp);
            }

            ///////////////////////////////////////////////////////////

            status = PcdSelect(g_ucTempbuf); //Ñ¡¶¨¿¨Æ¬
            if (status != MI_OK)
            {
                continue;
            }

            status = PcdAuthState(PICC_AUTHENT1A, 60, DefaultKey, g_ucTempbuf); //ÑéÖ¤¿¨Æ¬ÃÜÂë
            if (status != MI_OK)
            {
                continue;
            }

            status = PcdWrite(60, data1); //Ð´¿é
            if (status != MI_OK)
            {
                continue;
            }
            while (1)
            {
                status = PcdRequest(PICC_REQALL, g_ucTempbuf); //Ñ°¿¨
                if (status != MI_OK)
                {
                    InitializeSystem();
                    PcdReset();
                    PcdAntennaOff();
                    PcdAntennaOn();
                    continue;
                }
                status = PcdAnticoll(g_ucTempbuf); //·À³å×²
                if (status != MI_OK)
                {
                    continue;
                }
                status = PcdSelect(g_ucTempbuf); //Ñ¡¶¨¿¨Æ¬
                if (status != MI_OK)
                {
                    continue;
                }

                status = PcdAuthState(PICC_AUTHENT1A, 60, DefaultKey, g_ucTempbuf); //ÑéÖ¤¿¨Æ¬ÃÜÂë
                if (status != MI_OK)
                {
                    continue;
                }

                status = PcdValue(PICC_DECREMENT, 60, data2); //¿Û¿î
                if (status != MI_OK)
                {
                    continue;
                }

                status = PcdBakValue(60, 61); //¿é±¸·Ý
                if (status != MI_OK)
                {
                    continue;
                }

                status = PcdRead(61, g_ucTempbuf); //¶Á¿é
                if (status != MI_OK)
                {
                    continue;
                }
                printf("¿¨¶Á¿é£º"); //³¬¼¶ÖÕ¶ËÏÔÊ¾,
                for (i = 0; i < 16; i++)
                {
                    temp = g_ucTempbuf[i];
                    printf("%X", temp);
                }

                print("\n");
                //	    for(i=0;i<250;i++)//ÏÈÊä³öÒ»ÖÖÆµÂÊµÄÉùÒô
                //        {
                //         for(j=0;j<80;j++);
                //         Speaker=~Speaker;
                //       }
                delay1(100);
                LED_GREEN = 1;
                delay1(100);
                LED_GREEN = 0;
                delay1(200);
                LED_GREEN = 1;
                PcdHalt();
            }
        }

    cleanup_platform();
    return 0;
}
