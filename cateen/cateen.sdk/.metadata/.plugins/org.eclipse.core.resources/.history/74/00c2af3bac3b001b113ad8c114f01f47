/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <string.h>
#include "platform.h"
#include "xil_printf.h"
#include "cateen.h"
#include "sleep.h"
#include "xil_io.h"
#include "xparameters.h"
#include "hx711_zynq.h"
#include "xgpio.h"
#include "mfrc522.h"

#define data_Addr = 0x3c;
#define data_AddrOpp = ~data_Addr;


unsigned char data1[16] = {0x12, 0x34, 0x56, 0x78, 0xED, 0xCB, 0xA9, 0x87, 0x12, 0x34, 0x56, 0x78, 0x3c, 0xc3, 0x3c, 0xc3};
unsigned char data2[4] = {0, 0, 0, 0x01};
unsigned char DefaultKey[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
//unsigned char DefaultKey[6] = {0xD3, 0xF7, 0xD3, 0xF7, 0xD3, 0xF7};

//unsigned char Id[20] = {"E7ED1EB2"};
//unsigned char Id[20] = {'E','7','E','D','1','E','B','2'};
//unsigned char Id[20] = {0x45, 0x37, 0x45, 0x44, 0x31, 0x45, 0x42, 0x32};
//unsigned char Id[20] = {0xE7, 0xED, 0x1E, 0xB2, '\0'};
unsigned char Id[20] = {0xE7, 0xED, 0x1E, 0xB2};
//unsigned char Id0[20] = {0xFA, 0xBB, 0x7E, 0x82}; BAD CARD
unsigned char Id0[20] = {0xE7, 0xED, 0x1E, 0xB2};
unsigned int Price0 = 2;
unsigned char Addr0[1] = {0x08};


void delay1(unsigned int z)
{
	usleep(z * 10);
}

unsigned int gram_start;
XGpio miso, rst, mosi, sck, sda;
unsigned char g_ucTempbuf[20];


int main()
{
    init_platform();
    //initial GPIO
    int s0, s1, s2, s3, s4;
    s0 = XGpio_Initialize(&miso, MF522_MISO_ID);
    s1 = XGpio_Initialize(&rst,  MF522_RST_ID);
    s2 = XGpio_Initialize(&mosi, MF522_MOSI_ID);
    s3 = XGpio_Initialize(&sck,  MF522_SCK_ID);
    s4 = XGpio_Initialize(&sda,  MF522_SDA_ID);
    if ( (s0 != XST_SUCCESS) && (s1 != XST_SUCCESS) && (s2 != XST_SUCCESS) && (s3 != XST_SUCCESS) && (s4 != XST_SUCCESS)) {
       	xil_printf("Gpio Initialization Failed\r\n");
        return XST_FAILURE;
    }

    print("Hello World\n\r");

    gram_start = HX711_ZYNQ_mReadReg(XPAR_HX711_ZYNQ_0_S00_AXI_BASEADDR,HX711_ZYNQ_S00_AXI_SLV_REG2_OFFSET);

    unsigned char data_W[16];
    unsigned char addr_W = 0x04;
    unsigned char status, i;
    unsigned int temp;
    PcdReset();
    PcdAntennaOff();
    PcdAntennaOn();
    while (1)
    {

        status = PcdRequest(PICC_REQALL, g_ucTempbuf);
        if (status != MI_OK) //initial
        {
            PcdReset();
            PcdAntennaOff();
            PcdAntennaOn();
            continue;
        }

        status = PcdAnticoll(g_ucTempbuf);
        if (status != MI_OK)
        {
            continue;
        }

        ////////////////////////////////

        printf("The ID : "); //
        for (i = 0; i < 4; i++)
        {
            temp = g_ucTempbuf[i];
            printf("%X", temp);
        }

        printf("\n");
        ///////////////////////////////////////////////////////////

        status = PcdSelect(g_ucTempbuf); //Ñ¡¶¨¿¨Æ¬
        if (status != MI_OK)
        {
            continue;
        }

        status = PcdAuthState(PICC_AUTHENT1A, addr_W, DefaultKey, g_ucTempbuf); //ÑéÖ¤¿¨Æ¬ÃÜÂë
        if (status != MI_OK)
        {
            continue;
        }

        dataGen(get_gram(), data_W, addr_W);
        status = PcdWrite(addr_W, data_W); //Ð´¿é
        if (status != MI_OK)
        {
            continue;
        }

        status = PcdRead(addr_W, g_ucTempbuf); //¶Á¿é
        if (status != MI_OK)
        {
            continue;
        }
        printf("The value : "); //³¬¼¶ÖÕ¶ËÏÔÊ¾,
        for (i = 0; i < 16; i++)
        {
            temp = g_ucTempbuf[i];
            printf("%X", temp);
        }
        
        if (status != MI_OK)
        {
            break;
        }
    }
    cleanup_platform();
    return 0;
}



unsigned int get_gram() {
	unsigned int gram;
	printf("begin to get gram ");
	while (1) {
		gram = HX711_ZYNQ_mReadReg(XPAR_HX711_ZYNQ_0_S00_AXI_BASEADDR,HX711_ZYNQ_S00_AXI_SLV_REG2_OFFSET);
		if (gram > 10 && gram < 5000) {
			break;
		}
	}

	return gram - gram_start;
}

void dataGen(unsigned int data_I, unsigned char * data_O, unsigned char addr) {
	*(data_O + 0) = 0;
	*(data_O + 1) = 0;
	*(data_O + 2) = data_I / 256;
	*(data_O + 3) = data_I % 256;

	*(data_O + 4) = ~ *(data_O + 0);
	*(data_O + 5) = ~ *(data_O + 1);
	*(data_O + 6) = ~ *(data_O + 2);
	*(data_O + 7) = ~ *(data_O + 3);

	*(data_O + 8) = *(data_O + 0);
	*(data_O + 9) = *(data_O + 1);
	*(data_O + 10) = *(data_O + 2);
	*(data_O + 11) = *(data_O + 3);

	*(data_O + 12) = addr;
	*(data_O + 13) = ~ addr;
	*(data_O + 14) = addr;
	*(data_O + 15) = ~ addr;
}


